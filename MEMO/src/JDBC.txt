●JDBC

▶<기본구조>
//import java.sql.*; // sql 모든 패키지 사용
//여기서 사용한 모든 클래스와 인터페이스는 java.sql 패키지에 들어가있음
import java.sql.Connection; //java.sql : 패키지 , Connection : 클래스 or 인터페이스 이름
import java.sql.DriverManager;
import java.sql.SQLException;

public class DB_Connect {
	public static void main(String[] args) {
		try {
			// <JDBC 프로그래밍 단계>
			// 0. jar파일 가져오기 - 프로젝트 당 하나만 하면됨
			// 프로젝트 이름-오른쪽 마우스 클릭-Properties-Java Build Path-library-Add External JARs
			// C:\Oracle\product\12.2.0\dbhome_1\jdbc\lib\ojdbc8.jar 선택

			// 1. 오라클 드라이버 로드하는 작업
			Class.forName("oracle.jdbc.driver.OracleDriver"); // forName : 메서드
			// ClassNotFoundException 발생
			// oracle.jdbc.driver라는 패키지 안에 있는 OracleDriver라는 이름의 클래스를 사용하겠다는 뜻

			System.out.println("드라이버 로드 성공");

			String url = "jdbc:oracle:thin:@localhost:1521:orcl"; // localhost : '내 컴퓨터' 의미 or 내 IP 주소 써도됨
			String user = "jspid"; // 내가만든 user가 없거나 오타 났을때 SQLException 발생
			String pw = "jsppw"; // 우리가 접속하려는 계정 여기다 쓰기

			System.out.println("DB와의 연결을 시도합니다.");

			// 2. 계정에 접속
			Connection conn = DriverManager.getConnection(url, user, pw);
			System.out.println("conn:" + conn); // 접속 됐다는 정보가 들어가있음 = 접속 객체가 만들어짐
			System.out.println("DB와의 연결 성공");
			// 내가 로드한 드라이버 정보가 DriverManager라는 클래스 들어옴 - Connection 객체를 리턴
			// getConnection(메소드): Connection 객체를 리턴
			// Connection(인터페이스)
			// conn 변수 : url, user, pw에 접속한 정보가 들어옴
			
			
			// 이곳에서 insert, update, delete 등  많은 작업 가능
			
			
			System.out.println("DB와 연결끊기 시도합니다.");

			// 3. 연결 끊기(자원반납) (마지막 단계)
			conn.close(); // exit
			System.out.println("DB와 연결 끊기 성공");

		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패");
			// Class.forName에서 발생하는 문제
			// jar파일(자료파일) 포함 안되어있거나, 문자 오타 났을 때 ClassNotFoundException 오류 발생

		} catch (SQLException e) {
//			e.printStackTrace();
			System.out.println("SQLException 발생");
			// DriverManager.getConnection() : 내가만든 user가 없거나 오타 났을때 SQLException 발생
			// conn.prepareStatement()
			// conn.close() : 접속 안했는데 접속 끊을때 SQLException 발생
		}

	}

}


▶select
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Select {

	public static void main(String[] args) {

		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:orcl";
		String id = "jspid";
		String pw = "jsppw";
		
		//변수 선언은 밖에다 하기
		Connection conn = null; // 값 초기화
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			//1. 드라이버 로드
			Class.forName(driver); // 예외처리 안하면 오류 발생

			//2. 계정 접속
//			DriverManager.getConnection(url,id,pw); // 예외처리 오류남
			conn = DriverManager.getConnection(url, id, pw);
			// conn: jspid 계정에 접속된 정보가 담김
			System.out.println("접속 성공");

			//3. sql문 분석
			String sql = "select * from simple order by num asc"; // 그냥 글자 적은거임, 실행 X
			ps = conn.prepareStatement(sql);
			// prepareStatement: conn을 실행할 준비작업을 하기 위해 sql에 들어가있는 문장  분석하라는 명령어 - SQLException 예외발생
			// prepareStatement: PreparedStatement 객체를 리턴 
			// ps 변수: sql 문장("select * from simple") 분석한 정보 들어옴
			// String 변수가 sql 이기 때문에 sql로 써줌
			System.out.println("명령 분석");

			//4. 실행 - ps 이용
			rs = ps.executeQuery(); // 괄호 안에 sql 쓰면안됨
			// ps.: PreparedStatement 인터페이스가 가지고 있는 메소드를 사용하겠다는 것
			// executeQuery: select 실행한 문장을 가져오는 명령어 - ResultSet을 리턴함
			// rs : select 한 결과 (executeQuery 실행시킨 결과) 들어가있음
			// 내가 insert한 여러 줄의 레코드들이 ResultSet에 들어감
			while (rs.next()) { // rs에 담겨있는 여러줄의 반복 횟수 알 수 없기 때문에 while 사용
				// rs.next(): boolean값 가져옴 - rs가 관리하는 데이터(레코드)가 있으면 true-while 반복, 없으면 false-빠져나감
				int num = rs.getInt("num"); // int형 리턴 - 한줄 씩 접근해서 가져옴 // "num" : 반드시 컬럼이름 사용
				// rs.getInt : num 컬럼에 있는 정수값 가져오기
				String name = rs.getString("name");
				// rs.getString : name 컬럼에 있는 문자열 가져오기
				String addr = rs.getString(3); // "addr" 대신 몇번째인지 숫자로 써도됨
				System.out.println(num + "," + name + "," + addr);

			} // while

//			//5. 접속 끊기
//			conn.close(); // SQLException 발생할 수 있기 때문에 try 안에 넣어줌
//			System.out.println("연결 종료");

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			// Class.forName에서 발생하는 문제
			// jar파일(자료파일) 포함 안되어있거나, 문자 오타 났을 때 ClassNotFoundException 오류 발생
		} catch (SQLException e) {
			// DriverManager.getConnection(): 내가만든 user가 없거나 오타 났을때
			// conn.prepareStatement(): 존재하지 않는 table을 select하겠다고 하거나, 오타 났을 때
			// ps.executeQuery(): select를 실행할 수 없는 상황일 때 오류발생
			// rs.next() 
			// getInt(): 컬럼명 오타날 때
			// getString(): 컬럼명 오타날 때
			// conn.close() : 접속 안했는데 접속 끊을때 SQLException 발생
			e.printStackTrace();

		} finally {

			if (rs != null) { // 나중에 사용한것 부터 닫기
				try {
					rs.close(); // rs : select 한 결과 들어있는 자원  반납처리 - 예외 처리해줌
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			} // if rs

			if (ps != null) {
				try {
					ps.close(); // ps : 분석기
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			} // if ps

			// 5. 접속 끊기
			if (conn != null) { // null이 아니면 사용했다는 뜻 = 접속 성공했으면 종료하기 
				try {
					conn.close(); // Connection conn = null;
									// The local variable conn may not have been initialized 로컬변수 초기화 오류생김
				} catch (SQLException e) {
					e.printStackTrace();
				} // SQLException 발생할 수 있기 때문에 try 안에 넣어줌
				  // conn 변수 try 안에있기 때문에 main으로 변수 빼서 전체 사용할 수 있도록 해주기
				System.out.println("연결 종료");
			} // if conn
		} // finally

	} // main
} // Select


▶insert
0~2번, 5번은 같고 3,4번만 다름

			//3. sql문 분석
			// 입력받아서 출력하기
			Scanner sc = new Scanner(System.in);
			
			int in_num;
			String in_name;
			String in_addr;

			System.out.print("번호: ");
			in_num = sc.nextInt();

			System.out.print("번호: ");
			in_name = sc.next();

			System.out.print("번호: ");
			in_addr = sc.next();

//			[방법①]
//			String sql = "insert into simple(num,name,addr) values(4,'choi','제주')";
			
//			[방법②]
//			int in_num = 6;
//			String in_name="태연";
//			String in_addr="강릉";
//			String sql = "insert into simple(num,name,addr) values(" + in_num + ",'" + in_name + "','" + in_addr +"')" ;
			// sql문장 작성: 문자열 양쪽으로 작은따옴표 입력 주의, insert 문장을 ();로 끝내면안됨

//			[방법③]
			//in_num, in_name, in_addr 변수 있어야함
			String sql = "insert into simple(num,name,addr) values(?,?,?)"; // ?: 위치홀더 (값 자리에만 ? 사용가능)
			ps = conn.prepareStatement(sql); // sql문장 분석해서 실행시킬 준비하는 명령어 - ps: 분석한 정보 받음

			// set : 물음표자리에 분석한 정보 넣는 setting 할거라 set 사용
			ps.setInt(1, in_num); // 분석한 정보 이용해서 setInt 1번 물음표 자리에 in_num 변수 넣어라
			ps.setString(2, in_name); // setString 2번 물음표 자리에 in_name 변수 넣어라
			ps.setString(3, in_addr);

			//4. 실행 - ps 이용
			int count = ps.executeUpdate();
			// ps.executeUpdate() : insert 문장 성공적으로 실행(삽입)된 갯수가 리턴됨
			System.out.println("count: " + count);
			if (count == 0)
				System.out.println("삽입 실패");
			else
				System.out.println("삽입 성공");

//			conn.commit(); // commit 입력하지 않아도 자동으로 commit됨


▶update
0~1번, 5번은 같고 2,3,4번만 다름

			//2. 계정 접속
			conn = DriverManager.getConnection(url, id, pw);

			int up_num = 3;
			String up_name = "정국";
			String up_addr = "목포"; 
			

			//3. sql문 분석 -- insert와 다른점 3번 부분만 다름
//			[방법①]
//			String sql = "update simple set name='웬디', addr='광주' where num=7";
			
//			[방법②]
			// up_num 번호를 조건으로 up_name, up_addr 이름과 주소 수정 
//			String sql = "update simple set name='" + up_name + ",'addr='" + up_addr + "' where num = " + up_num;
			
//			[방법③]
			String sql = "update simple set name=?, addr=? where num=?"; // 값 들어가는 자리만 ? 사용 가능
			ps = conn.prepareStatement(sql);

			ps.setString(1, up_name);
			ps.setString(2, up_addr);
			ps.setInt(3, up_num);

			System.out.println("sql문 분석");

			//4. 실행
			int count = ps.executeUpdate();
			// ps.executeUpdate() : update 문장 성공적으로 실행(수정)된 갯수가 리턴됨
			System.out.println("sap문 실행");

			System.out.println("count:" + count);
			if (count == 0)
				System.out.println("수정 실패");
			else
				System.out.println("수정 성공");

		
▶delete
0~2번, 5번은 같고 3,4번만 다름

		try {
			// 1. 드라이버로드
			Class.forName(driver);

			// 2. 계정 접속
			conn = DriverManager.getConnection(url, id, pw);
			System.out.println("접속 성공");

			// 3. sql문 분석
			String sql = "delete from simple where num = 8";
			ps = conn.prepareStatement(sql);
			System.out.println("명령 분석");

			// 4. sql문 실행
			int count = ps.executeUpdate();
			System.out.println("count: " + count);
			if (count == 0)
				System.out.println("삭제 실패");
			else
				System.out.println("삭제 성공");


▶memo_Person
drop sequence perseq;
create sequence perseq
	increment by 1
	start with 1
	minvalue 0
	nocache; -- 미리 수를 1~20까지 뽑아놓지  말라는 뜻
	
drop table person;
create table person(
	num number primary key,
	name varchar2(20),
	age number,
	gender char(3),
	birth date default sysdate
);

insert into person values(perseq.nextval,'보라',23,'여','1992/3/4');
insert into person values(perseq.nextval,'슬기',34,'여','1977/11/9');
insert into person values(perseq.nextval,'찬열',17,'남','2004/12/29');
insert into person values(perseq.nextval,'백현',57,'남','1965/2/6');

commit;
select * from person;


[JDBC 프로그래밍 단계]
0. ojdbc8.jar파일 가져오기
1. 드라이버 로드 : Class.forName
2. 계정 접속 : Connection conn = DriverManager.getConnection(url,user,pw);
3. sql문 분석(실행할 준비) conn.prepareStatement(sql)
4. sql문 실행
	select: rs = ps.executeQuery();
	insert,update,delete : int count = ps.executeUpdate
5. 접속 종료(자원 반납) : conn.close();




DTO(Data Transfer Object)
-데이터 전달을 위해 만든 오브젝트(객체)
-bean, VO(Value Object)라고 부르기도 한다. -- 값을 가지고 있는 객체 한덩어리
-데이터를 담을 수 있는 private 변수와 그 변수를 조작할 수 있는 setter,getter(메서드)로 구성된다.

DAO(Data Access Object)
-DB를 사용해 데이터를 조작하거나 조회하는 기능을 전담하도록 만든 오브젝트(객체)
-저장소(DB)에 데이터를 입력, 조회, 수정, 삭제 등 처리를 담당


▶PersonMain
import java.util.ArrayList;
import java.util.Scanner;

//console 창에서 하는 작업  : 출력,입력 등
public class PersonMain {

	PersonDao dao = new PersonDao(); // 객체 만듬 : PersonDao 생성자로 가서 출력
	Scanner sc = new Scanner(System.in);

	// 생성자
	PersonMain() {
		System.out.println("PersonMain 생성자");
		init(); // init 함수 호출
	} // PersonMain

	public void init() { //init 정의
//		System.out.println("init");

		while (true) {
			System.out.println("\n === 메뉴 선택하기 ===");
			System.out.println("1. 전체 정보 조회");
			System.out.println("2. 성별로 조회");
			System.out.println("3. 정보 수정");
			System.out.println("4. 정보 삭제");
			System.out.println("5. 정보 추가");
			System.out.println("6. 프로그램 종료");
			System.out.print(">> 메뉴 번호 입력: ");

			int menu = sc.nextInt(); //번호 입력받는 작업 - menu : 입력한 숫자 들어옴

			switch (menu) {
			case 1:
				ArrayList<PersonBean> list = dao.getAllPerson(); // Dao에서 리턴한 값  list에 담아서 Main으로 끌고와 출력
				
				// Dao에서 select 한것을 Main에서 출력하기 위해 ArrayList에 담고 return해서 
				// Main으로 끌고와 넘어온 것을 받아서 for문 돌려 출력하는 작업 
//				String title = "번호\t" + "이름\t" + "나이\t" + "성별\t" + "생년월일\t";
//				System.out.println(title);
//				// 레코드 컬럼별로 하나씩 가져와서 출력하기
//				for(int i=0;i<list.size(); i++) {
//					PersonBean bean = list.get(i); → i : 0번째~3번째까지 
//					String result = bean.getNum()+"\t" +
//									bean.getName()+"\t" +
//									bean.getAge()+"\t" +
//									bean.getGender()+"\t" +
//									bean.getBirth();
//					System.out.println(result);
//				}
				
				displayPerson(list); //↑ 위 내용 계속 중복되기 때문에  아래에 메서드 만들어서 호출하는 형태로 만들어줌
				break;
				
			case 2:
				getPersonByGender(); // 앞에 dao.이 없기 때문에 현재 클래스 안에서 getPersonByGender 생성
				break;
				
			case 3: // 정보수정
				updateData();
				break;
				
			case 4:
				deleteData();
				break;
			case 5:
				insertData();
				break;
			case 6:
				System.out.println("프로그램을 종료합니다.");
				System.exit(0); // 프로그램 정상 종료
				break;
			default:
				System.out.println("1~6 사이의 번호만 입력 가능");
			} // switch

		} // while(true)

	} // init
	
	private void deleteData() { // 다른 클래스에서 사용 안하게 하려면 private
		System.out.print("삭제할 번호 입력: ");
		int num = sc.nextInt();
		
		int count = dao.deleteData(num);
		if(count >0) {
			System.out.println("삭제 성공");
		}
		else if(count == 0) {
			System.out.println("!조건에 맞는 레코드가 없음!");
		}
		else { // 음수
			System.out.println("삭제 실패");
		}
		
	}
	
	public void updateData() {
		System.out.print("수정할 번호 입력: ");
		int num = sc.nextInt();
		
		System.out.print("수정할 이름입력: ");
		String name = sc.next();
		
		System.out.print("수정할 나이 입력: ");
		int age = sc.nextInt();
		
		System.out.print("수정할 성별 입력: ");
		String gender = sc.next();
		
		System.out.print("수정할 생년월일 입력: ");
		String birth = sc.next();
		

		PersonBean bean = new PersonBean(num,name,age,gender,birth);
		int count = dao.updateData(bean); // bean : (num,name,age,gender,birth)
		if(count >0) {
			System.out.println("수정 성공");
		}
		else if(count == 0) {
			System.out.println("!조건에 맞는 레코드가 없음!");
		}
		else { // 음수
			System.out.println("수정 실패");
		}
		
	} // updateData

	
	public void insertData() {
		System.out.println("번호는 시퀀스로 입력됩니다.(생략)");
		System.out.print("이름입력: ");
		String name = sc.next();
		System.out.print("나이 입력: ");
		int age = sc.nextInt();
		System.out.print("성별 입력: ");
		String gender = sc.next();
		System.out.print("생년월일 입력: ");
		String birth = sc.next();
		
		PersonBean bean = new PersonBean(0,name,age,gender,birth);
		// ↓ 기존 생성자 재 활용 방법 or PersonBean 에서 생성자 하나 더 만들어도 됨
		// ★bean 변수의 자료형(type): 5가지가 한묶음으로 담긴 PersonBean :(int num, String name, int age, String gender, String birth)
		//0: 생성자에서 첫번째자리(int num) 시퀀스에 대한것 받아주기 위해 의미없는 숫자 0으로 넣어줌
		int count = dao.insertData(bean);
		
		if(count <0) {
			System.out.println("삽입 실패");
		}
		else {
			System.out.println("삽입 성공");
		}
		
	} // insertData
	
	public void getPersonByGender() { // 2번 호출 - 현재 Main 클래스에 있는 메소드는 성별 입력하는 기능
		System.out.println("찾으려는 성별 입력: ");
		String gender = sc.next();
		
		ArrayList<PersonBean> list = dao.getPersonByGender(gender); // dao 메소드는 아래 DB 작업(select)하는 기능 
		//select * from person where gender = '남' or '여'

		displayPerson(list); // 남자 또는 여자 레코드 목록을 list에 보내서 출력
		
	} // getPersonByGender
	
	public void displayPerson(ArrayList<PersonBean> list) { // person 찾은거 for문 반복하는거 메서드로 만들어서 가져오기
		
		String title = "번호\t" + "이름\t" + "나이\t" + "성별\t" + "생년월일\t";
		System.out.println(title);
		// 레코드 컬럼별로 하나씩 가져와서 출력하기
		for(int i=0;i<list.size(); i++) {
			PersonBean bean = list.get(i); // 0번째 줄 가져와라
			String result = bean.getNum()+"\t" +
							bean.getName()+"\t" +
							bean.getAge()+"\t" +
							bean.getGender()+"\t" +
							bean.getBirth();
			System.out.println(result);
		} // for
		
	} // displayPerson

	public static void main(String[] args) {
		new PersonMain(); // 생성자의 객체 - 객체를 만들면 자동으로 호출되는 메서드(=생성자)로 간다.

	} // main

} // PersonMain

// 생성자
//1. 클래스와 이름이 같은 메서드이다.
//2. 객체를 만들면 자동으로 호출되는 메서드로 간다.
//3. 정의하지 않아도 default 생성자(기본 생성자)가 존재한다. () 괄호 안에 아무것도없음


▶PersonDao
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;

// DB
public class PersonDao {

	String driver = "oracle.jdbc.driver.OracleDriver";
	String url = "jdbc:oracle:thin:@localhost:1521:orcl";
	String id = "jspid";
	String pw = "jsppw";

	Connection conn = null;
	PreparedStatement ps = null;
	ResultSet rs = null;

	//기본 생성자
	PersonDao() {
		System.out.println("personDao 생성자"); // PersonMain에서 객체 만들어야 호출
		// 0.jar 가져오기

		try {
			// 1. 드라이버 로드
			Class.forName(driver);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	} // PersonDao 생성자

	public void getConn() { // 메서드
		// 2. 계정 접속
		try {
			conn = DriverManager.getConnection(url, id, pw);
		} catch (SQLException e) {
			System.out.println("접속 오류");
		}
	}// getConn

	// 모든 Person레코드를 가지고 오는 메서드 생성
	public ArrayList<PersonBean> getAllPerson() { // void 대신 리스트 타입을 넣어줘야 return에 오류안남
		// 2
		getConn(); // 계정에 접속하기 위해 getConn 호출해서 진짜 계정접속 getConn 메서드 실행되도록함

		// ArrayList는 한번만 밖에 만들어줌
		ArrayList<PersonBean> list = new ArrayList<PersonBean>();

		String sql = "select * from person order by num";
		try {
			// 3. sql문 분석
			ps = conn.prepareStatement(sql);

			// 4. sql문 실행
			rs = ps.executeQuery();
//			 NUM NAME   AGE GENDER BIRTH
//			 ---- ----- ---- ------ --------
//			    1 보라    23 여     92/03/04 → 이 한줄을 Bean으로 만들어서 0번째 ArrayList 안에들어가있음
//			    2 슬기    34 여     77/11/09 → 1번째 ArrayList
//			    3 찬열    17 남     04/12/29 → 2번째 ArrayList
//			    4 백현    57 남     65/02/06 → 3번째 ArrayList

			while (rs.next()) { // rs가 관리하는 곳에 데이터가  몇줄 있는지 모르기 때문에 while - next는 boolean를 리턴함
				int num = rs.getInt("num");
				String name = rs.getString("name");
				int age = rs.getInt("age");
				String gender = rs.getString("gender");
//				String birth = rs.getString("birth"); // 시분초까지 같이 불러옴
				String birth = String.valueOf(rs.getDate("birth")); // 가져온 날짜를 문자열로 변경
				// Integer.parseInt("123"); // "123" -> 123 = 문자->숫자
				// String.valueOf(123); // 123 -> "123" = 숫자 -> 문자

				// 한줄 한줄 콘솔에 출력해보기 - 메인에서 출력할 예정
//				System.out.println(num + "," + name + "," + age + "," + gender + "," + birth);

				// bean이란 이름으로 관리하는 PersonBean 객체 생성 - 다섯가지 칼럼을 한 묶음으로 만듬
				// 하나의 빈에 계속 여러 줄을 넣으면 덮어쓰기가되서 마지막 넣은 한줄만 나오기 때문에 ArrayList로 관리해줌
				// 객체 4번 반복해야하기 때문에 while에 넣음
				PersonBean bean = new PersonBean(num, name, age, gender, birth);

				list.add(bean); // ArrayList에 하나씩 넣는 작업

			} // while

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (ps != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (conn != null)
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		} // finally
		System.out.println("list 갯수: " + list.size()); // 총 4개
		return list;

	} // 생성자

	// 성별 별로 묶음을 해줌
	public ArrayList<PersonBean> getPersonByGender(String gender) {
		ArrayList<PersonBean> list = new ArrayList<PersonBean>();

		// 2. 계정 접속
		getConn();

		// 3. sql문 분석
//		select * from person where gender = '남'; - db작업이기 때문에 Dao에서함
		String sql = "select * from person where gender = '" + gender + "'"; // gender: 내가 입력한 값, 공백 띄어쓰기X
		try {
			ps = conn.prepareStatement(sql);

			// 4. sql문 실행
			rs = ps.executeQuery();

			while (rs.next()) {
				int num = rs.getInt("num");
				String name = rs.getString("name");
				int age = rs.getInt("age");
				String gender2 = rs.getString("gender");
				String birth = String.valueOf(rs.getDate("birth"));

				PersonBean bean = new PersonBean(num, name, age, gender2, birth);
				list.add(bean);

			} // while

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			// 5. 연결끊기
			if (rs != null)
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (ps != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (conn != null)
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		} // finally

		// 4 return
		System.out.println(gender + ":" + list.size());
		return list;
	}

	public int insertData(PersonBean bean) { // 5개를 한 묶음으로 묶은 PersonBean 넣기
		// 내가 입력한 것 잘 넘어오는지 확인작업(test Code) 해보기
//		System.out.println(bean.getNum());
//		System.out.println(bean.getName());
//		System.out.println(bean.getAge());
//		System.out.println(bean.getGender());
//		System.out.println(bean.getBirth());

		// num 빼고 Dao로 가지고감
		// insert into person values(perseq.nextval,name,age,gender,birth);
		// 2.
		getConn();

		int count = -1; // 지역변수 / 중간에 에러가 났을 경우를 대비해서 초기값은 보통 음수를 많이 넣음, 성공하면 양수가 들어가도록
		String sql = "insert into person (num,name,age,gender,birth)" + "values(perseq.nextval,?,?,?,?)";
		try {
			// 3.sql문 분석
			ps = conn.prepareStatement(sql);

			ps.setString(1, bean.getName());
			ps.setInt(2, bean.getAge());
			ps.setString(3, bean.getGender());
			ps.setString(4, bean.getBirth());

			// 4.sql문 실행
			count = ps.executeUpdate(); // 성공적으로 실행(삽입)된 갯수가 리턴됨
//			ps.executeUpdate(); // 몇개 성공했는지 알고 싶지 않으면 그냥 int count 안써도됨
			System.out.println("count: " + count);

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (ps != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (conn != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

		} // finally

		return count;
		// count cannot be resolved to a variable : count가 insertDate 안에서만 정의되어있어서

	} // insertData

	public int updateData(PersonBean bean) {
//		잘 넘어오는지 확인
//		System.out.println(bean.getNum());
//		System.out.println(bean.getName());
//		System.out.println(bean.getAge());
//		System.out.println(bean.getGender());
//		System.out.println(bean.getBirth());

		int count = -1;
//		update person set name = 'a', age = 11, gender '남', birth = '99-4-4' where num=2;
		// 2.
		getConn();

		String sql = "update person set name=?, age=?, gender=?, birth=? where num=?";

		try {
			// 3. sql문 분석
			ps = conn.prepareStatement(sql);

			ps.setString(1, bean.getName());
			ps.setInt(2, bean.getAge());
			ps.setNString(3, bean.getGender());
			ps.setNString(4, bean.getBirth());
			ps.setInt(5, bean.getNum());

			// 4. sql문 실행
			count = ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (conn != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

		} // finally

		return count;

	} // updateData
	
	public int deleteData(int num) {
		int count = -1; 
		// 2. 계정 접속
		getConn();
		
		// 3. sql문 분석
		String sql = "delete from person where num =" + num; // 변수 하나밖에없으니까 그냥 써주기
		try {
			ps = conn.prepareStatement(sql);
			
			count = ps.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			if (conn != null)
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		} //finally
			
		return count; // 삭제된 갯수를 리턴
		
	} // deleteData
	

} // PersonDao


▶PersonBean
// 레코드 한줄, 사용자 입력한 정보를 담을 수 있는 클래스
// 여러 데이터를 하나로 묶을 수 있는 클래스 : Bean
public class PersonBean {
	
	//1. 레코드 한줄을 담을 수 있는 변수 생성
	// 멤버변수
	private int num;
	private String name;
	private int age;
	private String gender;
		
	//3. 생성자 : 클래스와 이름이 동일	
	public PersonBean(int num, String name, int age, String gender, String birth) {
		super();
//		int a; // 지역변수
		this.num = num;
		this.name = name;
		this.age = age;
		this.gender = gender;
		this.birth = birth;
				
	//2. 넣은 값 다른 클래스에서도 사용할 수 있도록 getter,setter 불러옴
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getBirth() {
		return birth;
	}
	public void setBirth(String birth) {
		this.birth = birth;
	}
	private String birth;

}




